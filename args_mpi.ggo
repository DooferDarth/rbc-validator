package "rbc_validator_mpi"
version "v0.1.0"

purpose "\nGiven an HOST_SEED and either:
1) an AES256 CLIENT_CIPHER and plaintext UUID;
2) a ChaCha20 CLIENT_CIPHER, plaintext UUID, and IV;
3) an ECC Secp256r1 CLIENT_PUB_KEY;
where CLIENT_* is from an unreliable source. \
Progressively corrupt the chosen cryptographic function by a certain \
number of bits until a matching client seed is found. The matching \
HOST_* will be sent to stdout, depending on the cryptographic function.

This implementation uses MPI."

usage "rbc_validator_mpi [OPTIONS...] --mode=none HOST_SEED
  or : rbc_validator_mpi [OPTIONS...] --mode=[aes,chacha20] HOST_SEED CLIENT_CIPHER UUID [IV]
  or : rbc_validator_mpi [OPTIONS...] --mode=ecc HOST_SEED CLIENT_PUB_KEY
  or : rbc_validator_mpi [OPTIONS...] --mode=* -r/--random -m/--mismatches=value
  or : rbc_validator_mpi [OPTIONS...] --mode=* -b/--benchmark -m/--mismatches=value
Try `rbc_validator_mpi --help' for more information."

description "If the client seed is found then the program will have an exit code \
0. If not found, e.g. when providing --mismatches and \
especially --exact, then the program will have an exit code \
1. For any general error, such as parsing, out-of-memory, \
etc., the program will have an exit code 2.

The original HOST_SEED, passed in as hexadecimal, is corrupted by \
a certain number of bits and used to generate the cryptographic output. \
HOST_SEED is always 32 bytes, which corresponds to 64 hexadecimal \
characters."

versiontext "Christopher Robert Philabaum <cp723@nau.edu>"

args "--output-dir=src/cmdline --default-optional --unnamed-opts --file-name cmdline_mpi \
--show-required=(MANDATORY) --no-handle-error"

defmode "Random"
defmode "Benchmark"

option "mode" - "Choose between only seed iteration (none), AES256 (aes), ChaCha20 (chacha20), \
and ECC Secp256r1 (ecc)."
    enum values="none","aes","chacha20","ecc"
    required

option "mismatches" m "The largest # of bits of corruption to test against, inclusively. \
Defaults to -1. If negative, then the size of key in bits will be the limit. If in random or \
benchmark mode, then this will also be used to corrupt the random key by the same # of bits; for this \
reason, it must be set and non-negative when in random or benchmark mode. Cannot be larger \
than what --subkey-size is set to."
    int typestr="value" default="-1"

option "subkey" s "How many of the first bits to corrupt and iterate over. Must be between 1 and 256. \
Defaults to 256."
    int typestr="value" default="256"

modeoption "random" r "Instead of using arguments, randomly generate HOST_SEED and CLIENT_*. This must be \
accompanied by --mismatches, since it is used to corrupt the random key by the same # of \
bits. --random and --benchmark cannot be used together."
    flag off mode="Random"

modeoption "benchmark" b "Instead of using arguments, strategically generate HOST_SEED and CLIENT_*. \
Specifically, generates a client seed that's always 50% of the way through a rank's \
workload, but randomly chooses the thread. --random and --benchmark cannot be used \
together."
    flag off mode="Benchmark"

option "all" a "Don't cut out early when key is found."
    flag off

option "count" c "Count the number of keys tested and show it as verbose output."
    flag off

option "fixed" f "Only test the given mismatch, instead of progressing from 0 to --mismatches. This is \
only valid when --mismatches is set and non-negative."
    flag off

option "verbose" v "Produces verbose output and time taken to stderr."
    flag off
